# Generated by Django 4.2 on 2024-11-07 19:33

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UsersLibroteka',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(max_length=30, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=35)),
                ('dni', models.CharField(max_length=10, unique=True, validators=[django.core.validators.RegexValidator('^\\d{1,10}$')])),
                ('password', models.CharField(max_length=128)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
                'db_table': 'users_libroteka',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id_Author', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('country', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Autor',
                'verbose_name_plural': 'Autores',
                'db_table': 'author',
            },
        ),
        migrations.CreateModel(
            name='Editorial',
            fields=[
                ('id_Editorial', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='Anagrama', max_length=100)),
            ],
            options={
                'verbose_name': 'Editorial',
                'verbose_name_plural': 'Editoriales',
                'db_table': 'editorial',
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id_Genre', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='Novela', max_length=100)),
            ],
            options={
                'verbose_name': 'Género',
                'verbose_name_plural': 'Géneros',
                'db_table': 'genre',
            },
        ),
        migrations.CreateModel(
            name='OrderStatus',
            fields=[
                ('id_Order_Status', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('Pendiente', 'Pending'), ('Pago aprobado', 'Paid'), ('En preparación', 'Preparing'), ('Enviado', 'Sent'), ('Recibido', 'Received')], default='Pendiente', max_length=15)),
            ],
            options={
                'verbose_name': 'Estado de la orden',
                'verbose_name_plural': 'Estados de las órdenes',
                'db_table': 'OrderStatus',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id_Order', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField()),
                ('books', models.JSONField(default=list)),
                ('total', models.DecimalField(decimal_places=2, max_digits=10)),
                ('books_amount', models.IntegerField()),
                ('id_Order_Status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.orderstatus')),
                ('id_User', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, to_field='email')),
            ],
            options={
                'verbose_name': 'Orden',
                'verbose_name_plural': 'Órdenes',
                'db_table': 'Orders',
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id_Book', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(max_length=1500)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('stock', models.IntegerField(default=1000)),
                ('avg_rating', models.FloatField(blank=True, default=0.0)),
                ('id_Author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='books.author')),
                ('id_Editorial', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='books.editorial')),
                ('id_Genre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='books.genre')),
            ],
            options={
                'verbose_name': 'Libro',
                'verbose_name_plural': 'Libros',
                'db_table': 'book',
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, '1 star'), (2, '2 stars'), (3, '3 stars'), (4, '4 stars'), (5, '5 stars')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id_book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.book')),
                ('id_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Valoracion',
                'verbose_name_plural': 'Valoraciones',
                'db_table': 'Rating',
                'unique_together': {('id_user', 'id_book')},
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('id_book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.book')),
                ('id_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Favorito',
                'verbose_name_plural': 'Favoritos',
                'db_table': 'Favorite',
                'unique_together': {('id_user', 'id_book')},
            },
        ),
    ]
